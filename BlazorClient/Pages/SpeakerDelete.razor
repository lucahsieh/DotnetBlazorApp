@page "/speakers/delete/{id}"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h1>Delete Speaker</h1>

<p>This component demonstrates fetching data from the server.</p>

@if(speaker != null)
{
  <h3>Are you sure to delete this speaker ?</h3>
  <EditForm Model="@speaker" OnValidSubmit="@HandleDelete">
  <DataAnnotationsValidator />
  <ValidationSummary />
  <p>First Name: @speaker.firstName</p>
  <p>Last Name: @speaker.lastName</p>
  <p>Email: @speaker.email</p>
  <p>Mobile Number: @speaker.mobileNumber</p>
  <p>Area of specialization: @speaker.areaOfSpecialization</p>
  <p>City of residence: @speaker.cityOfResidence</p>
  <p>Province of residence: @speaker.provinceOfResidence</p>
  <p>Employer: @speaker.employer</p><br/>
  <a href="speakers">
    <button  class="btn btn-secondary">Cancel</button>
  </a>
  <button type="submit" class="btn btn-danger">Delete</button>
</EditForm>
}
@code {
  string baseUrl = "http://localhost:6001/";

      [Parameter]
      public string id { get; set; }
      Speaker speaker;

      protected override async Task OnInitializedAsync()
      {
          System.Console.WriteLine("OnInitializedAsync");

          speaker = await Http.GetJsonAsync<Speaker>($"{baseUrl}api/speaker/{id}");
      }
      private async void HandleDelete()
      {
          System.Console.WriteLine("HandleDelete");

          string endpoint = $"{baseUrl}api/Speaker/{speaker.speakerId}";
          await Http.SendJsonAsync(HttpMethod.Delete, endpoint, null);
          NavigationManager.NavigateTo("speakers");
      }
}